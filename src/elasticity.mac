load(vect)$
load(eigen)$
load(hj_fortran2)$

optimprefix : tt$

f: openw("elasticity.f90")$

block(
  [X, D, volume, lam, miu],
  X: genmatrix(X, 3, 4),
  D: genmatrix(D, 3, 3),
  volume: genmatrix(volume, 1, 1),
  lam: genmatrix(lam, 1, 1),
  miu: genmatrix(miu, 1, 1),
  
  tet_stvk(X, D, volume, lam, miu) := block(
    [DS, F, E],
    DS: addcol(col(X,2)-col(X,1), col(X,3)-col(X,1), col(X,4)-col(X,1)),
    F: DS.D,
    E: 0.5*(transpose(F).F-ident(3)),
    volume*(miu*mat_norm(E, frobenius)^2+0.5*lam*mat_trace(E)^2)
  ),  
  with_stdout(f, val_jac_hes_to_f90(tet_stvk, [X, D, volume, lam, miu])),
  
  tet_linear(X, D, volume, lam, miu) := block(
    [DS, F, e],
    DS: addcol(col(X,2)-col(X,1), col(X,3)-col(X,1), col(X,4)-col(X,1)),
    F: DS.D,
    e: 0.5*(transpose(F)+F)-ident(3),
    volume*(miu*mat_norm(e, frobenius)^2+0.5*lam*mat_trace(e)^2)
  ),  
  with_stdout(f, val_jac_hes_to_f90(tet_linear, [X, D, volume, lam, miu])),
  
  tet_neohookean(X, D, volume, lam, miu) := block(
    [DS, F, I1, I3],
    DS: addcol(col(X,2)-col(X,1), col(X,3)-col(X,1), col(X,4)-col(X,1)),
    F: DS.D,
    I1: mat_trace(transpose(F).F),
    I3: determinant(transpose(F).F),
    volume*(0.5*miu*(I1-log(I3)-3)+0.125*lam*log(I3)^2)
  ),
  with_stdout(f, val_jac_hes_to_f90(tet_neohookean, [X, D, volume, lam, miu])),
  
  return()
)$

block(
  [X, h, lam, miu],
  X: genmatrix(X, 3, 8),
  h: genmatrix(h, 1, 1),
  lam: genmatrix(lam, 1, 1),
  miu: genmatrix(miu, 1, 1),
  
  hex_linear(X, h, lam, miu) := block(
    [G, F, E],
    G: 1.0/(4*h[1,1])*matrix([-1, 1, -1, 1, -1, 1, -1, 1],
			     [-1, -1, 1, 1, -1, -1, 1, 1],
			     [-1, -1, -1, -1, 1, 1, 1, 1]),
    F: X.transpose(G), /*transpose(G . transpose(X)),*/
    E: 0.5*(transpose(F)+F)-ident(3),
    h*h*h*(miu*mat_norm(E, frobenius)^2+0.5*lam*mat_trace(E)^2)
  ),
  with_stdout(f, val_jac_hes_to_f90(hex_linear, [X, h, lam, miu])),
  
  hex_stvk(X, h, lam, miu) := block(
    [G, F, E],
    G: 1.0/(4*h[1,1])*matrix([-1, 1, -1, 1, -1, 1, -1, 1],
			     [-1, -1, 1, 1, -1, -1, 1, 1],
			     [-1, -1, -1, -1, 1, 1, 1, 1]),
    F: X.transpose(G), /*transpose(G . transpose(X)),*/
    E: 0.5*(transpose(F).F-ident(3)),
    h*h*h*(miu*mat_norm(E, frobenius)^2+0.5*lam*mat_trace(E)^2)
  ),
  with_stdout(f, val_jac_hes_to_f90(hex_stvk, [X, h, lam, miu])),
  
  return()
)$

close(f)$